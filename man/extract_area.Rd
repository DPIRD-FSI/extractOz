% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_area.R
\name{extract_area}
\alias{extract_area}
\title{Extract an Area of Interest Using Australian GPS Coordinates}
\usage{
extract_area(x, coords, spatial, area)
}
\arguments{
\item{x}{\code{Vector} of length 2 with longitude and latitude values expressed as
decimal degree values in that order, named "x" and "y". Or a named \code{list}
object of \code{vectors} each as previously described.  When a named \code{list}
object is provided the "location" column will include the name values, else
it will default to an integer referring to the order in the list in which
the location occurred.}

\item{spatial}{a user-supplied \link{sf} object that contains information to
derive location information from.}

\item{area}{the field in \code{spatial} that should be returned.}
}
\value{
a \code{data.table} with the provided \acronym{GPS} coordinates and the
respective \code{area} value from \code{spatial}.
}
\description{
A generic function to extract an area of interest for user-provided
\acronym{GPS} coordinates.
}
\examples{
# load the `aez` data included in the package for use in example only.
# the `extract_ae_zone()` performs this exact task, this is strictly
# for demonstration purposes only
library(sf)
aez <- read_sf(system.file(
"extdata",
"aez.gpkg",
package = "extractOz",
mustWork = TRUE
))
locs <- list(
  "Merredin" = c(x = 118.28, y = -31.48),
  "Corrigin" = c(x = 117.87, -32.33),
  "Tamworth" = c(x = 150.84, y = -31.07)
)

extract_area(x = locs, spatial = aez, area = "AEZ")
}
\seealso{
Other extract functions: 
\code{\link{extract_ae_zone}()},
\code{\link{extract_soil_order}()}
}
\concept{extract functions}
